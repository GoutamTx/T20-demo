name: E2E - Deploy and Test Exploit Detection

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  end-to-end-test:
    name: Run End-to-End Test
    runs-on: ubuntu-latest
    steps:
      # 1. Check out the repository's code
      - name: Checkout Code
        uses: actions/checkout@v4

      # 2. Set up a temporary Kubernetes cluster using Kind (Kubernetes in Docker)
      - name: Create Kind Cluster
        uses: helm/kind-action@v1.10.0

      # 3. Deploy the entire Loki and Promtail monitoring stack
      - name: Deploy Loki Stack
        run: kubectl apply -f loki-stack/

      # 4. Deploy the Tracee eBPF monitoring agent
      - name: Deploy Tracee
        run: kubectl apply -f tracee/

      # 5. Wait for all deployments to be ready before starting the test
      #    This is crucial to prevent the test from running before the agents are active.
      - name: Wait for Loki Pod
        run: kubectl wait --for=condition=ready pod -l app=loki -n monitoring --timeout=180s

      - name: Wait for Promtail DaemonSet
        run: kubectl wait --for=condition=ready pod -l app=promtail -n monitoring --timeout=180s
      
      - name: Wait for Tracee DaemonSet
        run: kubectl wait --for=condition=ready pod -l app=tracee -n kube-system --timeout=180s
        
      # 6. Perform the ptrace exploit simulation
      - name: Perform Ptrace Attack Simulation
        run: |
          echo "üöÄ Starting ptrace attack simulation..."
          # Run a pod that installs strace and immediately uses it to count syscalls for PID 1.
          # The '-c' flag makes strace exit automatically, which is perfect for CI.
          # The '--rm' flag cleans up the pod after it completes.
          kubectl run attacker-ptrace --image=alpine --restart=Never --rm \
            -- /bin/sh -c "apk add --no-cache strace && strace -c -p 1"

      # 7. Verify that Tracee detected the exploit
      - name: Verify Detection Logs
        run: |
          echo "‚è≥ Waiting for logs to propagate..."
          sleep 15 # Give a few seconds for logs to be collected and available

          echo "üîç Searching for detection event in Tracee logs..."
          
          # Get the name of a running Tracee pod
          TRACE_POD=$(kubectl get pods -n kube-system -l app=tracee -o jsonpath='{.items[0].metadata.name}')
          
          # Check the logs of the Tracee pod for the ptrace event from the strace command.
          # The 'grep' command will fail the workflow if the string is not found.
          kubectl logs $TRACE_POD -n kube-system | grep '"eventName":"ptrace"'
          
          echo "‚úÖ Success! Ptrace event was detected by Tracee."
